#!/bin/bash

### Checking tools
if [ -z $(which ss) ];then
	echo "Tool 'ss' not found. Please, install 'ss'"
	exit 66 ### 'netstat' not found
fi
connections_types_ss=(established syn-sent syn-recv fin-wait-1 fin-wait-2 time-wait closed close-wait last-ack listening closing all)
### Checking argument
if [[ -z "$1" ]];then
	read -p "Process name or PID (default all): " prog 
	### Replace all uppercase letters with lowercase
	prog="$(echo "$prog" | tr [[:upper:]] [[:lower:]])" 
else 
	prog="$1"
fi

echo "Connection types:"
for i in $(seq 0 "$((${#connections_types_ss[@]} -1))"); do
	echo "$(($i+1)) - ${connections_types_ss[$i]}"
done

read -p "Enter the number from 1 to ${#connections_types_ss[@]} (default ${#connections_types_ss[@]}): " connect_type
## Checking for the contents of letters or other numbers in a variable connect_type 
if [[ ( ! -z "$connect_type" && "$connect_type" =~ [^0-9]+ ) || "$connect_type" -gt "${#connections_types_ss[@]}" ]]; then
	echo "The number of connection types can only be a number in the range from 1 to ${#connections_types_ss[@]}"
	exit 1 ### Letters or other numbers 
fi

echo -e "Do you want run from sudo user?\nYou need superuser (root) privileges to see all the information."
read -p "Yes/No (default no): " answer


#Get ip addresses
ip_addresses() {
	### /^([0-9.]+):.* ([A-Za-z_]+) ([0-9A-Za-z_/-]+).*/\1 \2 \3/ - this regular expression, finds in line ip, state and process (45.55.41.223 CLOSE_WAIT 44815/plugin_host-3)
	### 's/^\s*//' - this regular expression, replaces tabs with blanks
	if [[ "${connections_types_ss["$(($connect_type -1))"]}" == "all" ]]; then
		netstat_result_ss="$(${1}ss -tunap state "all" 2> /dev/null | awk -v prog="$prog" '$0 ~ prog {print $6, $2, $7}' | sed -En 's/^([0-9.]+):.* ([A-Za-z_-]+) (.*)/\1 \2 \3/p' | sort | uniq -c | sed -nE 's/^\s*//p'| sort -nr -k1)"
	else
		netstat_result_ss="$(${1}ss -tunap state "${connections_types_ss["$(($connect_type -1))"]}" | awk -v prog="$prog" -v state="${connections_types_ss["$(($connect_type -1))"]}" '$0 ~ prog {print $5, state, $6}' | sed -En 's/^([0-9.]+):.* ([A-Za-z_-]+) (.*)/\1 \2 \3/p' | sort | uniq -c | sed -nE 's/^\s*//p'| sort -nr -k1)" 
	fi
	### Checking netstat_result_ss for emptiness
	if [[ ! -z "$netstat_result_ss" ]]; then
		### Checking for the contents of letters in a variable number_lines
		read -p "Enter the number of lines for output (default all of $(echo "$netstat_result_ss" | wc -l) connections): " number_lines
		if [[ ! -z "$number_lines" && "$number_lines" =~ [^0-9]+ ]]; then
			echo "The number of lines to output can only be a number"
			exit 2 ### Letters in number_lines
		fi
		### Formatting the output
		if [[ ! -z "$number_lines" ]]; then			
			netstat_result_ss="$(echo "$netstat_result_ss" | head -n $number_lines)"
		fi
	else
		echo "Process \"$prog\" or connect type \"${connections_types_ss["$(($connect_type -1))"]}\" not found"
		exit 4 ### If netstat_result_ss is empty
	fi
}


orgs(){
	### Checking variable prog
	# if [[ -z "$prog" ]]; then
	# 	echo -e "All:"
	# else
	# 	echo -e "\n${prog}:"
	# fi
	while read IP; do		
		result="$(whois "$(echo $IP | awk '{print $2}')" | awk -F':' '/^Organization/ {print $2}'| sed -En 's/ +([A-Z].*)/\1/p' | tr '\n' ';')"
		city="$(whois "$(echo $IP | awk '{print $2}')" | awk -F':' '/^City/ {print $2}' | sed -En 's/ +([A-Z].*)/\1/p' | tr '\n' ';')"
		res_connect="$(echo $IP | awk '{printf(" (Process: %s; IP: %s; Count: %s; State: %s)", $4, $2, $1, $3)}')"
		### Checking organization and connection type 
		if [[ ! -z "$result" && ! -z "$res_connect" ]]; then
			echo -e "\nCity: ${city}\nOrganization: $result $res_connect"
		elif [[ ! -z "$res_connect" ]]; then
			echo -e "\nCity: No city\nNo organization $res_connect"			
		fi
	done <<< "$netstat_result_ss"
}

#Checking the answer about SUDO
case $answer in
	"Yes"|"yes") 
				ip_addresses "sudo "
				orgs
				;;
	"No"|"no") 
				ip_addresses " "
				orgs
				;;
	[[:alnum:]]*)
				echo "Yes or No"
				exit 3 #Bad choice
				;;
	*)  ip_addresses " "
		orgs
				;;
esac
