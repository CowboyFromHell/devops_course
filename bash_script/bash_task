#!/bin/bash
#set -eo pipefail

### Checking tools
if [ -z $(which whois) ]; then
	echo "Tool 'whois' not found. Please, install 'whois'"
	exit 66 ### 'whois' not found
fi

if [ -z $(which netstat) ];then
	echo "Tool 'netstat' not found. Please, install 'netstat'"
	exit 66 ### 'netstat' not found
fi

connections_types=(LISTEN ESTABLISHED TIME_WAIT CLOSE_WAIT " ")

### Checking argument
if [[ -z "$1" ]];then
	read -p "Name process or PID (default all): " prog 
	### Replace all uppercase letters with lowercase
	prog="$(echo "$prog" | tr [[:upper:]] [[:lower:]])" 
else 
	prog="$1"
fi

echo -e "Connection types:\n1) LISTEN\n2) ESTABLISHED\n3) TIME_WAIT\n4) CLOSE_WAIT\n5) ALL"
read -p "Enter the number from 1 to 5 (default 5): " connect_type
if [[ ! -z "$connect_type" && "$connect_type" =~ [6-9] ]]; then
	echo "The number of connection types can only be a number in the range from 1 to 5"
	exit 1 ### Letters or other numbers 
fi

echo -e "Do you want run from sudo user?\nYou need superuser (root) privileges to see all the information."
read -p "Yes/No (default no): " answer
#read -p "Number of lines for output (default all): " number_lines

### Checking for the contents of letters in a variable number_lines
# if [[ ! -z "$number_lines" && "$number_lines" =~ [^0-9]+ ]]; then
# 	echo "The number of lines to output can only be a number"
# 	exit 2 ### Letters in number_lines
# fi



#Get ip addresses
ip_addresses() {
	### /^([0-9.]+):.* ([A-Za-z_]+) ([0-9A-Za-z_/-]+).*/\1 \2 \3/ - this regular expression, finds in line ip, state and process (45.55.41.223 CLOSE_WAIT 44815/plugin_host-3)
	### 's/^\s*//' - this regular expression, replaces tabs with blanks 
	netstat_result="$(${1}netstat -tunapl 2> /dev/null | awk -v prog="$prog" '$0 ~ prog {print $5, $6, $7}' | sed -En 's/^([0-9.]+):.* ([A-Za-z_]+) ([0-9A-Za-z_/-]+).*/\1 \2 \3/p' | sort | uniq -c | sed -nE 's/^\s*//p'| sort -nr -k1)"
	### Checking netstat_result for emptiness
	if [[ ! -z "$netstat_result" ]]; then
		### Checking for the contents of letters in a variable number_lines
		read -p "Enter the number of lines for output (default all of $(echo "$netstat_result" | wc -l) connections): " number_lines
		if [[ ! -z "$number_lines" && "$number_lines" =~ [^0-9]+ ]]; then
			echo "The number of lines to output can only be a number"
			exit 2 ### Letters in number_lines
		fi
		### Formatting the output
		if [[ ! -z "$number_lines" ]]; then			
			netstat_result="$(echo "$netstat_result" | awk -v connect_type="${connections_types["$(($connect_type -1))"]}" '$0 ~ connect_type {print $0}' | head -n $number_lines)"
		else
			netstat_result="$(echo "$netstat_result" | awk -v connect_type="${connections_types["$(($connect_type -1))"]}" '$0 ~ connect_type {print $0}')"
		fi
	else
		echo "Process \"$prog\" not found"
		exit 4 ### If netstat_result is empty
	fi
}


orgs(){
	### Checking variable prog
	# if [[ -z "$prog" ]]; then
	# 	echo -e "All:"
	# else
	# 	echo -e "\n${prog}:"
	# fi
	while read IP; do		
		result="$(whois "$(echo $IP | awk '{print $2}')" | awk -F':' '/^Organization/ {print $2}'| sed -En 's/ +([A-Z].*)/\1/p' | tr '\n' ';')"
		city="$(whois "$(echo $IP | awk '{print $2}')" | awk -F':' '/^City/ {print $2}' | sed -En 's/ +([A-Z].*)/\1/p' | tr '\n' ';')"
		res_connect="$(echo $IP | awk '{printf(" (Process: %s; IP: %s; Count: %s; State: %s)", $4, $2, $1, $3)}')"
		### Checking organization and connection type 
		if [[ ! -z "$result" && ! -z "$res_connect" ]]; then
			echo -e "\nCity: ${city}\nOrganization: $result $res_connect"
		elif [[ ! -z "$res_connect" ]]; then
			echo -e "\nCity: No city\nNo organization $res_connect"			
		fi
	done <<< "$netstat_result"
}

#Checking the answer about SUDO
case $answer in
	"Yes"|"yes") 
				ip_addresses "sudo "
				orgs
				;;
	"No"|"no") 
				ip_addresses " "
				orgs
				;;
	[[:alnum:]]*)
				echo "Yes or No"
				exit 3 #Bad choice
				;;
	*)  ip_addresses " "
		orgs
				;;
esac


