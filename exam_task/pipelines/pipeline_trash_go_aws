pipeline {
    agent any

    stages {
        stage('Checking trash on S3') {
            steps {
                // Send message about start building 
                withCredentials([string(credentialsId: 'bot_token', variable: 'TOKEN'), string(credentialsId: 'chat_id', variable: 'CHAT_ID')]) {
                    sh "curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='Started building *${env.JOB_NAME}*\n*Date*: ${sh(script:'date', returnStdout: true).trim()}'"
                    // Checking trash, and send message if found it (If count of builds more than 3)
                    withEnv(["JOB=${env.JOB_NAME}"]) {
                        sh '''#!/bin/bash
                            lines=($(aws s3 ls s3://mydoombucket666/go/ | awk '{print $2}' | sort -r))
                            #echo "${#lines[@]}"
                            if (( "${#lines[@]}" > 3 )); then
                                for i in "${lines[@]:3}"; do
                                    aws s3 rm s3://mydoombucket666/go/"$i" --recursive
                                    curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text="*${JOB}*\n*Remove*: $i"
                                done
                            else
                                echo "Less"
                            fi
                        '''
                    }
                }
            }
        }
    }
    
    // Sending message about status current build
    post {
        success { 
            withCredentials([string(credentialsId: 'bot_token', variable: 'TOKEN'), string(credentialsId: 'chat_id', variable: 'CHAT_ID')]) {
                sh "curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}*:\n*Build*: `OK`\n*Date*: ${sh(script:'date', returnStdout: true).trim()}'"
            }
        }

        aborted {
            withCredentials([string(credentialsId: 'bot_token', variable: 'TOKEN'), string(credentialsId: 'chat_id', variable: 'CHAT_ID')]) {
                sh "curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}*:\n*Build*: `Aborted`\n*Date*: ${sh(script:'date', returnStdout: true).trim()}'"
            }
     
        }
        
        failure {
            withCredentials([string(credentialsId: 'bot_token', variable: 'TOKEN'), string(credentialsId: 'chat_id', variable: 'CHAT_ID')]) {
                sh "curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}*:\n*Build*: `Failed`\n*Date*: ${sh(script:'date', returnStdout: true).trim()}'"
            }
        }
    }
}