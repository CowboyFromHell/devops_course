pipeline {
	agent any

	stages {
		stage('Checking Git') {
			steps {
				// Send message about start building
			    withCredentials([string(credentialsId: 'bot_token', variable: 'TOKEN'), string(credentialsId: 'chat_id', variable: 'CHAT_ID')]) {
                    sh "curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='Started building *${env.JOB_NAME}*\n*Date*: ${sh(script:'date', returnStdout: true).trim()}'"
                }
				git branch: 'app_main', url: 'https://github.com/CowboyFromHell/app_two.git'
			}
		}

		stage('Building docker image') {
			steps {
				sh 'docker build -t app_go_img .'
				snykSecurity additionalArguments: '--docker app_go_img:latest', severity: 'medium', snykInstallation: 'Snyk', snykTokenId: 'Snyk', targetFile: 'Dockerfile'
				sh 'docker save app_go_img > app_go.tar'	   
			}
		}
		 
		 
		stage('Deploying docker image') {
			steps {
			    sshagent(credentials: ['SSH']) {
			        sh "mkdir -p ~/.ssh/"
			        sh "ssh-keyscan -t rsa,dsa 10.10.4.100 >> ~/.ssh/known_hosts"
					sh 'scp app_go.tar ec2-user@10.10.4.100:~'
					sh "ssh ec2-user@10.10.4.100 'sudo docker load < app_go.tar'"
					sh "ssh ec2-user@10.10.4.100 'sudo rm app_go.tar'"
					sh "ssh ec2-user@10.10.4.100 'sudo docker rm -f app_go'"
					sh "ssh ec2-user@10.10.4.100 'sudo docker run --rm -d -p 8080:8080 --name app_go app_go_img'"
					// Trying remove remote trash
					script {
					    try {
                            sh "ssh ec2-user@10.10.4.100 'sudo docker image rm \$(sudo docker images -f dangling=true -q)'"
                        } catch (err) {
                            echo "First run"
                        }
					}
					// Trying remove local trash
					script {
					    try {
					        sh "docker image rm \$(docker images -f dangling=true -q)"
					    } catch (err) {
					        echo "Empty"
					    }
					}
					sh "docker image rm app_go_img"
					// Uploading image to S3
					sh "aws s3 cp app_go.tar s3://mydoombucket666/go/\$(date '+%F')/app_go_\$(date '+%H_%M').tar"
				}
			}

		}
	}
	
	// Sending message about status current build
	post {
        success { 
            withCredentials([string(credentialsId: 'bot_token', variable: 'TOKEN'), string(credentialsId: 'chat_id', variable: 'CHAT_ID')]) {
                sh "curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}*:\n*Build*: `OK`\n*Published*: `YES`\n*Date*: ${sh(script:'date', returnStdout: true).trim()}'"
            }
        }

        aborted {
            withCredentials([string(credentialsId: 'bot_token', variable: 'TOKEN'), string(credentialsId: 'chat_id', variable: 'CHAT_ID')]) {
                sh "curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}*:\n*Build*: `Aborted`\n*Published*: `Aborted`\n*Date*: ${sh(script:'date', returnStdout: true).trim()}'"
            }
     
        }
        
        failure {
            withCredentials([string(credentialsId: 'bot_token', variable: 'TOKEN'), string(credentialsId: 'chat_id', variable: 'CHAT_ID')]) {
    
                sh "curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}*:\n*Build* : `Failed`\n*Published*: `NO`\n*Date*: ${sh(script:'date', returnStdout: true).trim()}'"
            }
        }
    }
}